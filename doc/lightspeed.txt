*lightspeed.txt*      For Neovim version 0.5       Last change: 2021 November 12

                    .-.. .. --. .... - ... .--. . . -.. 
                  __   _      __   __                      __
                 / /  (_)__ _/ /  / /____ ___  ___ ___ ___/ /
                / /__/ / _ `/ _ \/ __(_-</ _ \/ -_) -_) _  / 
               /____/_/\_, /_//_/\__/___/ .__/\__/\__/\_,_/  
                      /___/            /_/                   
                    .-.. .. --. .... - ... .--. . . -.. 
                                              
==============================================================================
CONTENTS                                                   *lightspeed-contents*

  Introduction ····································· |lightspeed-introduction|
  Usage ··················································· |lightspeed-usage|
  Configuration ·········································· |lightspeed-config|
  Default mappings ······························|lightspeed-default-mappings|
  Custom mappings ······························· |lightspeed-custom-mappings|
  Highlighting ········································ |lightspeed-highlight|
  Events ················································· |lightspeed-events|

==============================================================================
INTRODUCTION                *lightspeed* *lightspeed.nvim* *lightspeed-introduction*

Lightspeed is a motion plugin for Neovim, that makes it possible to reach any
targets in the visible window area with great efficiency, by entering a
2-character search pattern, and then optionally choosing a "labeled" target
among the subsequent on-screen matches. Multiline versions of the native
f/F/t/T commands are also implemented, as a convenience.

==============================================================================
USAGE                                                         *lightspeed-usage*

                                                 *lightspeed-2-character-search*
Command sequence for 2-character search in Normal mode, with the default
settings:

`s|S <c-x>? char1 (char2|label)? (<space>|<tab>)* label?`

That is, 
- invoke in the forward (`s`) or backward (`S`) direction
- optionally turn on X-mode (extend/exclude)
- enter 1st character of the search pattern (might short-circuit after this,
  if the character is unique in the search direction)
- enter 2nd character of the search pattern (might short-circuit after this,
  if there is only one match), or the label character, if the target is
  shortcutable.
- optionally cycle through the groups of matches that can be labeled at once
- choose a labeled target to jump to (in the current group)

                                              *lightspeed-jump-on-partial-input*
If you enter a character that is the only match in the search direction,
Lightspeed jumps to it directly, without waiting for a second input. To
mitigate accidents, a short timeout is set by default, until the second
character in the pair (and only that) is "swallowed" (see
`jump_on_partial_input_safety_timeout` in |lightspeed-config|).

                                                          *lightspeed-shortcuts*
There can be positions where the assigned label itself is enough to determine
the target you want to jump to (for example when a character is always
followed by a certain other character in the search area). Those you can reach
via typing the label character right after the first input, bypassing the
second one. The label gets a different highlight in these cases (by default,
appears as an "inverse" block of the normal labels).

                                                             *lightspeed-x-mode*
The mnemonic for X-mode could be "extend/exclude". In the forward direction,
the cursor goes to the end of the match; in the backward direction, the cursor
stops just before - in an absolute sense, after - the end of the match (the
equivalent of `T` for two-character search). In Operator-pending mode, the
edge of the operated area always gets an offset of +2 - this means that in the
forward direction the motion becomes |inclusive| (the cursor position will be
included in the operation).

                                                          *lightspeed-eol-match*
A character before <EOL> can be targeted by pressing <enter> after it
(indicated by `¬` in the highlighted match).

                       *lightspeed-1-character-search* *lightspeed-instant-repeat*
Lightspeed also overrides the native `f`/`F`/`t`/`T` motions with enhanced
versions that work over multiple lines. 

In Normal and Visual mode, the motion can be repeated by pressing the
corresponding key - `f` or `t` - again (they continue in the original
direction, whether it was forward or backward).

`F` and `T` always _revert_ the previous repeat. In the case of `T`, this
results in a different behaviour than the native `,` motion: `T` does not
repeat the search in the reverse direction, but puts the cursor back to its
previous position - before the previous match -, allowing for an easy
correction when you accidentally overshoot your target.

This "instant-repeat" mode is active until you type any other character.

To specify custom keys for triggering instant-repeat, see |lightspeed-config|.

If you would like to keep using `;` and `,` (or some other pair of keys) to be
able to trigger repeat in the native way ("cold" repeat after finishing
execution), see |lightspeed-custom-mappings|.

                                                       *lightspeed-enter-repeat*
Pressing <enter> after invoking any of Lightspeed's commands searches with the
previous input (1- and 2-character searches are saved separately).

                                                         *lightspeed-dot-repeat*
You can repeat change and delete operations with the `.` character, if
repeat.vim (https://github.com/tpope/vim-repeat) is installed.

Special cases:
- dot-repeating a jump based on partial input will target the first match of
  the previous search pattern (as if it would have been typed out in its
  entirety)
- dot-repeating a jump via a shortcut-label behaves the same as if we have not
  used the shortcut
- dot-repeating a jump in which group-switching was involved is repeated as
  <enter>-repeat (the target chosen is not saved, will prompt for input again)


Note: <C-o> will ignore the jump if the cursor line has not changed. This is a
      Neovim issue (https://github.com/neovim/neovim/issues/9874), and has
      nothing to do with this plugin.

==============================================================================
CONFIGURATION                                                *lightspeed-config*

Setting an individual option via the `opts` table directly:

`   require'lightspeed'.opts.highlight_unique_chars = false`

Setting multiple options via the `setup` function: >

    require'lightspeed'.setup { 
        grey_out_search_area = false,
        highlight_unique_chars = false,
    }
<
    Note: These will be merged with the current/default settings. (Settings
          not mentioned here are not disturbed.)

Common options~

`exit_after_idle_msecs = { labeled = 1500, unlabeled = 1000 }`

    Timeout value, in milliseconds, after which the plugin should exit
    unconditionally. (`unlabeled` refers to f/t-mode, and "cold-repeating" s/x
    searches.) The feature can be disabled by setting the given value to `nil`.

s/x-specific options~

`grey_out_search_area = true`

    If turned on, all syntax highlighting is washed out to a uniform, neutral
    grey in the search direction, so that the various marks of Lightspeed are
    clearly visible. If you decide to turn this off, make sure to configure
    your custom |lightspeed-highlighting| to fit the colorscheme being used.

`highlight_unique_chars = true`

    Highlight unique characters in the search direction, before entering the
    first input.

`match_only_the_start_of_same_char_seqs = true`

    This can be useful, so that e.g. a separator line will not snatch up all the
    available labels when you want to jump to a `==` or `--` beyond that. Also
    convenient for working with hex color codes.

`jump_on_partial_input_safety_timeout = 400`

    Timeout value, in milliseconds, until the follow-up character is
    "swallowed", when jumping to a unique character right after the first
    input (see |lightspeed-jump-on-partial-input|).

`substitute_chars = { ['\r'] = '¬' }`

    The keys in this table will be substituted in the highlighted matches by
    the given characters. This way whitespace characters can be made visible,
    and pairs containing them more easily targetable.

`safe_labels` >
    {"s", "f", "n"
     "u", "t"
     "/", "S", "F", "L", "N", "H", "G", "M", "U", "T", "?", "Z"}
<
    When the number of matches (-1) does not exceed the number of these "safe"
    labels, the plugin will jump to the first match automatically. Obviously,
    for this purpose you should choose keys that are unlikely to be used right
    after a jump!

    Note: Operator-pending mode ignores this, all targets (if multiple found)
          are labeled then (that is, the `labels` list will be used).

`labels` >
    {"s", "f", "n"
     "j", "k", "l", "o", "i", "w", "e", "h", "g"
     "u", "t"
     "m", "v", "c", ".", "z", ";", "a"
     "/", "S", "F", "L", "N", "H", "G", "M", "U", "T", "?", "Z"}
<
    Target labels to be used when there are more matches than the number of
    safe labels (+1).

    Heuristics behind the defaults: 
    - At least the first few labels should be the same on the two lists, since
      those become muscle memory, and might be used automatically, a bit like
      [count] values.
    - Since the commands themselves are mapped to left-hand keys, we tend to
      prioritize right-hand keys to get a better balance for the whole
      sequence on average.

`cycle_group_fwd_key = '<space>'`
`cycle_group_bwd_key = '<tab>'`

    These keys switch to the next/previous group of matches, when there are
    more matches than labels available.

`x_mode_prefix_key = '<c-x>'`

    Key to switch on |lightspeed-x-mode| for 2-character search. For this, you
    will probably want to use some special - non-searchable - key (|keycodes|
    are supported).

f/t-specific options~

`limit_ft_matches = 4`

    For 1-character search, the next 'n' matches will be highlighted after
    [count]. Highlighting matches can be turned off altogether by setting the
    value to 0 or `nil`.

`instant_repeat_fwd_key = nil`
`instant_repeat_bwd_key = nil`

    Custom keys to trigger instant-repeat and revert. These will only be
    "hijacked" while 1-character search is active, so you are free to use any
    key here, the original mappings will not be disturbed.

    Note: If you would like to keep using `;` and `,` to trigger repeat
          at any time, even after `ft:go` has finished executing, see
          |lightspeed-custom-mappings|.
<
==============================================================================
DEFAULT MAPPINGS                                   *lightspeed-default-mappings*

Normal mode~

s{char}{char}              Jump to the first character of {char}{char}
                           in the forward direction.
S{char}{char}              Jump to the first character of {char}{char}
                           in the backward direction.

Visual mode~

s{char}{char}              Extend visual selection up to and including the
                           first character of {char}{char} in the forward
                           direction.
S{char}{char}              Extend visual selection up to and including the
                           first character of {char}{char} in the backward
                           direction.

Operator-pending mode~

{operator}z{char}{char}    Perform {operator} from the cursor up to the first
                           character of {char}{char} in the forward direction.
{operator}Z{char}{char}    Perform {operator} from the cursor up to and
                           including the first character of {char}{char} in
                           the backward direction. (|exclusive| motion: the
                           cursor position is not included without |o_v|.)

{operator}x{char}{char}    Perform {operator} from the cursor up to and
                           including the second character of {char}{char} in
                           the forward direction.
{operator}X{char}{char}    Perform {operator} from the cursor up to the second
                           character of {char}{char} in the backward
                           direction. (|exclusive| motion: the cursor position
                           is not included without |o_v|.)

All modes~

[count]f{char}             To the [count]'th next {char}.
[count]F{char}             To the [count]'th previous {char}.
[count]t{char}             To right before the [count]'th next {char}.
[count]T{char}             To right after the [count]'th previous {char}.

{key}<Enter>               Repeat with previous input. (1-character and
                           2-character searches are stored separately.)

<Esc>                      Exit Lightspeed at any stage cleanly.

2-character search~

{key}<C-x>{pattern}        Switches to |lightspeed-x-mode| (extend/exclude) in
                           any mode. Can be configured with
                           `x_mode_prefix_key`.

<Tab> (or <Space>)         Cycle to the next group of labeled matches.
<S-Tab> (or <Tab>)         Cycle to the previous group of labeled matches.

                           When `jump_to_first_match` is set to `false`, and
                           no custom mappings are given, the second - 
                           presumably more comfortable - pair of mappings is
                           used. Can be configured with `cycle_group_fwd_key`
                           and `cycle_group_bwd_key`.

==============================================================================
CUSTOM MAPPINGS                                     *lightspeed-custom-mappings*

<Plug> keys are aliases for right hand sides of mappings - in our case, Lua
method calls. If you are not familiar with the concept, see |<Plug>| and
|using-<Plug>|.

Available <Plug> keys for all modes (pattern length, direction,
motion/operation semantics):

`<Plug>Lightspeed_s`  2-character  forward   /-like
`<Plug>Lightspeed_S`  2-character  backward  ?-like
`<Plug>Lightspeed_x`  2-character  forward   X-mode
`<Plug>Lightspeed_X`  2-character  backward  X-mode

`<Plug>Lightspeed_f`  1-character  forward   f-like
`<Plug>Lightspeed_F`  1-character  backward  F-like
`<Plug>Lightspeed_t`  1-character  forward   t-like
`<Plug>Lightspeed_T`  1-character  backward  T-like

Note: Be sure _not_ to use `-noremap`, as <Plug> mappings should be used
      recursively, by design.

The following correspond to the native `;` and `,` ("cold" repeat):

`<Plug>Lightspeed_;_sx`
`<Plug>Lightspeed_,_sx`
`<Plug>Lightspeed_;_ft`
`<Plug>Lightspeed_,_ft`

Note: These are currently experimental and might be changed or removed in the
      future.

For 2-character search, the keys for cycling between groups of matches, and
the prefix triggering X-mode can be set in the `opts` table, see
|lightspeed-config|.

                                           *lightspeed-disable-default-mappings*
Lightspeed does not remap any keys for which there is a custom mapping already
defined. If you wish to preserve the _native_ behaviour of some of the keys,
for example f/t, simply |unmap| the given keys after the plugin has been
loaded, or equivalently, map anything unused to the corresponding <Plug> keys,
before the plugin has been loaded.

==============================================================================
HIGHLIGHTING                                              *lightspeed-highlight*

Lightspeed uses the following highlight groups that you can configure to your
own liking:

    *LightspeedLabel*
        The character needed to be pressed to jump to the match position,
        after the whole search pattern has been given. It appears top of the
        second character of the pair, after the first input has been given.

    *LightspeedLabelOverlapped*
        When matches overlap, labels get next to each other - in that case
        they get different highlights, to be more easily distinguishable
        (slightly lighter or darker, depending on the global background).

    *LightspeedLabelDistant*
    *LightspeedLabelDistantOverlapped*
        If the number of matches exceeds the available target labels, the next
        group of labeled targets are shown with a different color. Those can
        be reached by pressing `cycle_group_fwd_key` before the label
        character.
         
    *LightspeedShortcut*
    *LightspeedShortcutOverlapped*
        Labels for positions that can be jumped to right after the first
        input (see |lightspeed-shortcuts|).
        These are highlighted as "inverted" labels by default
        (background/foreground switched).

    *LightspeedMaskedChar*
        The second character of the match, that is shown on top of the first
        one, as a reminder.

        NOTE: These should be unobtrusive - barely noticeable ideally -, and
        _much_ dimmer than the labels and shortcuts, otherwise the UI becomes
        too chaotic. Colorscheme authors, please do follow this advice.

    *LightspeedGreyWash*
        Foreground color of the "washed out" area for 2-character search.
        Depending on the colorscheme, it might be appropriate to link this to
        the Comment highlight group.

    *LightspeedUnlabeledMatch*
        Matches that can be jumped to automatically, i.e. do not get a label
        - the only ones, and the first ones if `jump_to_first_match` is on.
        (Bold black or white by default, depending on the global background.)

    *LightspeedOneCharMatch*
        Matching characters of f/t search. (Default: |LightspeedShortcut|
        without underline. Setting some background color is recommended, as
        there is no "grey wash" for one-character search mode.)

    *LightspeedUniqueChar*
        Unique characters in the search direction, shown if
        `highlight_unique_chars` is on. Uses the same settings as
        |LightspeedUnlabeledMatch| by default.

    *LightspeedPendingOpArea*
        When jumping based on partial input in operator-pending mode, we do
        not see the operation executed right away, because of the "safety"
        timeout (see |lightspeed-jump-on-partial-input|), therefore we set a
        temporary highlight on the operated area.

    *LightspeedCursor*
        Linked to |hl-Cursor| by default.

In order to preserve your custom settings after changing the colorscheme, you
might want to wrap them in a function, and define an autocommand like below.
(Lightspeed does the same, but with |:hi-default|, so it will not overwrite
yours.) >

    vim.cmd("augroup LightspeedCustomHighlight")
    vim.cmd("autocmd!")
    vim.cmd("autocmd ColorScheme * lua my_lightspeed_highlight_settings()")
    vim.cmd("augroup end")

==============================================================================
EVENTS                                                       *lightspeed-events*

The following |User| events are triggered on entering/exiting Lightspeed
(except for instant-repeat):

*LightspeedEnter* 
*LightspeedLeave* 

The below ones are triggered only for the corresponding motion types:

*LightspeedSxEnter* 
*LightspeedSxLeave* 
*LightspeedFtEnter* 
*LightspeedFtLeave* 

Note: The general ones above are triggered first/last when entering/exiting,
      respectively.

Example: >
    autocmd User LightspeedEnter nohlsearch
    autocmd User LightspeedLeave let &hlsearch=&hlsearch

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
